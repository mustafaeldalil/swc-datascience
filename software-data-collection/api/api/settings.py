"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if int(os.environ.get("DEBUG", default=0)) == 1 else False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "ai",
    "company",
    "scrapper",
    "user",
]

DEFAULT_RENDERER_CLASSES = ("rest_framework.renderers.JSONRenderer",)
if DEBUG:
    DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
        "rest_framework.renderers.BrowsableAPIRenderer",
    )

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = "api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATIC_ROOT = os.path.join(BASE_DIR, "public")

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# CELERY #########
REDIS_HOST = "localhost"
REDIS_PORT = "6379"
BROKER_URL = "redis://" + REDIS_HOST + ":" + REDIS_PORT + "/0"
BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 3600}
CELERY_RESULT_BACKEND = "redis://" + REDIS_HOST + ":" + REDIS_PORT + "/0"

# AIRTABLE #########
AIRTABLE_COMPANY_BASE_ID = os.environ.get("AIRTABLE_COMPANY_BASE_ID")
AIRTABLE_COMPANY_LINKEDIN_TABLE_ID = os.environ.get(
    "AIRTABLE_COMPANY_LINKEDIN_TABLE_ID"
)
AIRTABLE_COMPANY_LINKEDIN_RESULT_ID = os.environ.get(
    "AIRTABLE_COMPANY_LINKEDIN_RESULT_ID"
)
AIRTABLE_COMPANY_EMPLOYEES_LINKEDIN_RESULT_ID = os.environ.get(
    "AIRTABLE_COMPANY_EMPLOYEES_LINKEDIN_RESULT_ID"
)
AIRTABLE_PROFILE_LINKEDIN_BASE_ID = os.environ.get("AIRTABLE_PROFILE_LINKEDIN_BASE_ID")
AIRTABLE_PROFILE_LINKEDIN_TABLE_ID = os.environ.get(
    "AIRTABLE_PROFILE_LINKEDIN_TABLE_ID"
)
AIRTABLE_PROFILE_LINKEDIN_RESULT_ID = os.environ.get(
    "AIRTABLE_PROFILE_LINKEDIN_RESULT_ID"
)
AIRTABLE_COMPANY_WEBSITE_BASE_ID = os.environ.get("AIRTABLE_COMPANY_WEBSITE_BASE_ID")
AIRTABLE_COMPANY_WEBSITE_TABLE_ID = os.environ.get("AIRTABLE_COMPANY_WEBSITE_TABLE_ID")
AIRTABLE_PROMPT_CONTEXT_ID = os.environ.get("AIRTABLE_PROMPT_CONTEXT_ID")
AIRTABLE_QUESTIONS_QUERIES_ID = os.environ.get("AIRTABLE_QUESTIONS_QUERIES_ID")
AIRTABLE_PAGE_EXTRACTOR_ID = os.environ.get("AIRTABLE_PAGE_EXTRACTOR_ID")
AIRTABLE_PAGE_TO_SCRAP_ID = os.environ.get("AIRTABLE_PAGE_TO_SCRAP_ID")
AIRTABLE_TOKEN = os.environ.get("AIRTABLE_TOKEN")

# GOOGLE #########
GOOGLE_API_KEY_JSON_NAME = os.environ.get("GOOGLE_API_KEY_JSON_NAME")
GOOGLE_COMPANY_TO_SCRAP_LINKEDIN_SHEET_FILENAME = os.environ.get(
    "GOOGLE_COMPANY_TO_SCRAP_LINKEDIN_SHEET_FILENAME"
)
GOOGLE_COMPANY_EMPLOYEES_TO_SCRAP_LINKEDIN_SHEET_FILENAME = os.environ.get(
    "GOOGLE_COMPANY_EMPLOYEES_TO_SCRAP_LINKEDIN_SHEET_FILENAME"
)
GOOGLE_PROFILE_TO_SCRAP_LINKEDIN_SHEET_FILENAME = os.environ.get(
    "GOOGLE_PROFILE_TO_SCRAP_LINKEDIN_SHEET_FILENAME"
)

# SELENIUM #########
SELENIUM_IS_HEADLESS = (
    True if int(os.environ.get("SELENIUM_IS_HEADLESS")) == 1 else False
)
SELENIUM_MAX_TIMEOUT = int(os.environ.get("SELENIUM_MAX_TIMEOUT"))

# AWS #########
AWS_S3_BUCKET = os.environ.get("AWS_S3_BUCKET")
AWS_S3_REGION = os.environ.get("AWS_S3_REGION")
AWS_S3_ACCESS_KEY = os.environ.get("AWS_S3_ACCESS_KEY")
AWS_S3_SECRET_KEY = os.environ.get("AWS_S3_SECRET_KEY")

# OPENAI #########
OPEN_AI_TOKEN = os.environ.get("OPEN_AI_TOKEN")
GPT_TEMPERATURE = float(os.environ.get("GPT_TEMPERATURE", 0.5))
SIMILARITY_MODEL_PATH = os.environ.get("SIMILARITY_MODEL_PATH")
